import pandas as pd
main_data = pd.read_csv('/mount/src/main_data.csv')

Proyek Analisis Data: [Input Nama Dataset]
Nama: [Ulfah Humairah]
Email: [m211b4kx4372@bangkit.academy]
ID Dicoding: [m211b4kx4372]
Menentukan Pertanyaan Bisnis
Pertanyaan 1 Bagaimana pengaruh hari libur terhadap penjualan?
Pertanyaan 2 Apakah terdapat hubungan antara hari dalam minggu (weekday) dengan kinerja penjualan?
Import Semua Packages/Library yang Digunakan

[ ]
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

Data Wrangling
Gathering Data

[ ]
day_df=pd.read_csv('/content/day.csv')
day_df.head(5)

Merge Dataset


[ ]
day_df = pd.read_csv('/content/day.csv')

main_data = day_df
print(main_data)
main_data.to_csv("main_data.csv", index=False)
     instant      dteday  season  yr  mnth  holiday  weekday  workingday  \
0          1  2011-01-01       1   0     1        0        6           0   
1          2  2011-01-02       1   0     1        0        0           0   
2          3  2011-01-03       1   0     1        0        1           1   
3          4  2011-01-04       1   0     1        0        2           1   
4          5  2011-01-05       1   0     1        0        3           1   
..       ...         ...     ...  ..   ...      ...      ...         ...   
726      727  2012-12-27       1   1    12        0        4           1   
727      728  2012-12-28       1   1    12        0        5           1   
728      729  2012-12-29       1   1    12        0        6           0   
729      730  2012-12-30       1   1    12        0        0           0   
730      731  2012-12-31       1   1    12        0        1           1   

     weathersit      temp     atemp       hum  windspeed  casual  registered  \
0             2  0.344167  0.363625  0.805833   0.160446     331         654   
1             2  0.363478  0.353739  0.696087   0.248539     131         670   
2             1  0.196364  0.189405  0.437273   0.248309     120        1229   
3             1  0.200000  0.212122  0.590435   0.160296     108        1454   
4             1  0.226957  0.229270  0.436957   0.186900      82        1518   
..          ...       ...       ...       ...        ...     ...         ...   
726           2  0.254167  0.226642  0.652917   0.350133     247        1867   
727           2  0.253333  0.255046  0.590000   0.155471     644        2451   
728           2  0.253333  0.242400  0.752917   0.124383     159        1182   
729           1  0.255833  0.231700  0.483333   0.350754     364        1432   
730           2  0.215833  0.223487  0.577500   0.154846     439        2290   

      cnt  
0     985  
1     801  
2    1349  
3    1562  
4    1600  
..    ...  
726  2114  
727  3095  
728  1341  
729  1796  
730  2729  

[731 rows x 16 columns]
Insight:

xxx
xxx
Assessing Data
Melihat informasi setiap kolom dataset


[ ]
main_data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 731 entries, 0 to 730
Data columns (total 16 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   instant     731 non-null    int64  
 1   dteday      731 non-null    object 
 2   season      731 non-null    int64  
 3   yr          731 non-null    int64  
 4   mnth        731 non-null    int64  
 5   holiday     731 non-null    int64  
 6   weekday     731 non-null    int64  
 7   workingday  731 non-null    int64  
 8   weathersit  731 non-null    int64  
 9   temp        731 non-null    float64
 10  atemp       731 non-null    float64
 11  hum         731 non-null    float64
 12  windspeed   731 non-null    float64
 13  casual      731 non-null    int64  
 14  registered  731 non-null    int64  
 15  cnt         731 non-null    int64  
dtypes: float64(4), int64(11), object(1)
memory usage: 91.5+ KB
Mengetahui jumlah missing value di setiap Kolom day_df


[ ]
day_df.isnull().sum()

Memeriksa data Duplicated


[ ]
data_duplicated_day = day_df.duplicated().sum()
print("Jumlah data Duplikat dari Data Day CSV sebanyak : ", data_duplicated_day)
Jumlah data Duplikat dari Data Day CSV sebanyak :  0

[ ]
day_df.describe()

Insight:

xxx
xxx
Cleaning Data
Convert tipe data "dateday" menjadi datetime


[ ]
# Mengubah kolom 'dteday' pada day_df
day_df['dteday'] = pd.to_datetime(day_df['dteday'])
# Menampilkan informasi tipe data setelah perubahan
print("Tipe data pada day_df setelah perubahan:")
print(day_df.info())
Tipe data pada day_df setelah perubahan:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 731 entries, 0 to 730
Data columns (total 16 columns):
 #   Column      Non-Null Count  Dtype         
---  ------      --------------  -----         
 0   instant     731 non-null    int64         
 1   dteday      731 non-null    datetime64[ns]
 2   season      731 non-null    int64         
 3   yr          731 non-null    int64         
 4   mnth        731 non-null    int64         
 5   holiday     731 non-null    int64         
 6   weekday     731 non-null    int64         
 7   workingday  731 non-null    int64         
 8   weathersit  731 non-null    int64         
 9   temp        731 non-null    float64       
 10  atemp       731 non-null    float64       
 11  hum         731 non-null    float64       
 12  windspeed   731 non-null    float64       
 13  casual      731 non-null    int64         
 14  registered  731 non-null    int64         
 15  cnt         731 non-null    int64         
dtypes: datetime64[ns](1), float64(4), int64(11)
memory usage: 91.5 KB
None
Mengubah value kolom "season" , agar data lebih informatif/deskriptif


[ ]
# Mengubah angka season menjadi nama musim yang lebih mudah dimengerti
season_mapping = {1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'}
day_df['season_name'] = day_df['season'].map(season_mapping)
day_df.head()

Mengubah nilai dari "temp, atemp, hum and windspeed" ke bentuk yang telah dinormalisasi sebelumnya. sehingga lebih mudah dianalisis.


[ ]
day_df['temp'] = day_df['temp'] * 41
day_df['atemp'] = day_df['atemp'] * 50
day_df['hum'] = day_df['hum'] * 100
day_df['windspeed'] = day_df['windspeed'] * 67

# Menampilkan 5 baris pertama untuk memeriksa perubahan
day_df.head()

Simpan dataset yang sudah clean


[ ]
day_df.to_csv("clean_day_bike_data.csv", index=False)
Insight:

xxx
xxx
Exploratory Data Analysis (EDA)
Explore ...

[ ]
day_df.describe(include="all")

Jumlah Penggunaan Sepeda tiap musim


[ ]
# Mapping season to readable names
season_mapping = {1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'}
day_df['season_name'] = day_df['season'].map(season_mapping)

# Average rentals per season
season_avg_df = day_df.groupby('season_name')['cnt'].sum().reset_index()
season_avg_df.columns = ['Musim', 'Total Penggunaan Sepeda']
season_avg_df

Jumlah penyewaan Sepeda Pada Kategori Suhu Tertentu


[ ]
# Categorizing temperature into 5 bins
day_df['temp_bin'], bins = pd.cut(day_df['temp'], bins=5, labels=['Sangat Dingin', 'Dingin', 'Sedang', 'Hangat', 'Panas'], retbins=True)

# Average rentals per temperature category
temp_avg_df = day_df.groupby('temp_bin')['cnt'].sum().reset_index()
temp_avg_df.columns = ['Kategori Suhu', 'Total Penyewaan Sepeda']
temp_avg_df


[ ]
# Memisahkan data berdasarkan hari kerja dan hari libur
working_day_df = day_df[day_df['workingday'] == 1]
holiday_df = day_df[day_df['workingday'] == 0]

# Menghitung Rata-Rata Penyewaan per Musim untuk Hari Kerja dan Hari Libur
working_day_season_avg_df = working_day_df.groupby('season_name')['cnt'].sum().reset_index()
holiday_season_avg_df = holiday_df.groupby('season_name')['cnt'].sum().reset_index()

# Mengganti Nama Kolom untuk Kejelasan
working_day_season_avg_df.columns = ['Musim', 'Total Penyewaan (Hari Kerja)']
holiday_season_avg_df.columns = ['Musim', 'Total Penyewaan (Hari Libur)']

# Menggabungkan Kedua DataFrame untuk Perbandingan
season_comparison_df = pd.merge(working_day_season_avg_df, holiday_season_avg_df, on='Musim')
print(season_comparison_df)


    Musim  Total Penyewaan (Hari Kerja)  Total Penyewaan (Hari Libur)
0    Fall                        749073                        312056
1  Spring                        333665                        137683
2  Summer                        630613                        287976
3  Winter                        579059                        262554
Double-click (or enter) to edit

Insight:

xxx
xxx
Visualization & Explanatory Analysis
Pertanyaan 1:
Bagaimana pengaruh hari libur terhadap penjualan?


[ ]
# Menghitung Bagaimana pengaruh hari libur terhadap penjualan
season_avg = day_df.groupby('season_name')['cnt'].mean()

# Visualisasi
import matplotlib.pyplot as plt
season_avg.plot(kind='bar', title='pengaruh hari libur terhadap penjualan')
plt.xlabel('Bagaimana')
plt.ylabel('pengaruh hari libur terhadap penjualan(cnt)')
plt.show()

Pertanyaan 2:
Apakah terdapat hubungan antara hari dalam minggu (weekday) dengan kinerja penjualan


[ ]
# Membagi kolom suhu (temp) ke dalam 5 kategori menggunakan pd.cut
day_df['temp_bin'], bins = pd.cut(day_df['temp'],
                                   bins=5,
                                   labels=['Sangat Dingin', 'Dingin', 'Sedang', 'Hangat', 'Panas'],
                                   retbins=True)

# Menghitung rata-rata penyewaan sepeda per kategori suhu
temp_avg = day_df.groupby('temp_bin')['cnt'].mean()

# Siapkan data untuk visualisasi
categories = day_df['temp_bin'].cat.categories
temp_ranges = [f"{bins[i]:.2f} - {bins[i+1]:.2f}" for i in range(len(bins)-1)]
average_counts = temp_avg.values

# Membuat visualisasi
plt.figure(figsize=(10, 6))

# Bar chart untuk rata-rata penyewaan sepeda
bars = plt.bar(categories, average_counts, color='skyblue', alpha=0.7, edgecolor='black')

# Menambahkan garis horizontal untuk menunjukkan kisaran suhu
for i, bar in enumerate(bars):
    y = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, y + 1, temp_ranges[i], ha='center', color='black')

# Mengatur label dan judul
plt.xlabel('Kategori Suhu', fontsize=12)
plt.ylabel('pengaruh hari libur terhadap penjualan (cnt)', fontsize=12)
plt.title('Rata-rata Penyewaan Sepeda Berdasarkan Kategori Suhu dan Kisaran Suhu', fontsize=16)

# Menampilkan grid
plt.grid(axis='y')

# Menampilkan grafik
plt.show()

Insight:

xxx
xxx
Analisis Lanjutan (Opsional)

[ ]
Conclusion
Bagaimana pengaruh hari libur terhadap penjualan? Terdapat perbedaan signifikan antara penyewaan sepeda pada hari kerja dan hari libur, dengan hari libur menunjukkan total penyewaan yang lebih tinggi.

Apakah terdapat hubungan antara hari dalam minggu (weekday) dengan kinerja penjualan? Hubungan antara hari dalam minggu dan kinerja penjualan menunjukkan pola tertentu, di mana beberapa hari memiliki penyewaan yang lebih tinggi dibandingkan yang lain.

